plugins {
    id 'java'
    id 'maven-publish'
    id 'application'
    id 'org.beryx.runtime' version '1.11.2'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo1.maven.org/maven2')
    }

    maven {
        url = uri('https://jcenter.bintray.com/')
    }

    maven {
        url = uri('https://maven.pkg.github.com/tomasz-herman/PseudoAssemblerEmulator')
        credentials {
            username = "token"
            password = "\u0033\u0038\u0038\u0063\u0034\u0034\u0062\u0039\u0037\u0034\u0032\u0035\u0065\u0061\u0036\u0065\u0064\u0066\u0031\u0065\u0030\u0033\u0039\u0032\u0066\u0063\u0064\u0031\u0064\u0065\u0031\u0039\u0036\u0039\u0038\u0064\u0064\u0039\u0039\u0061"
        }
    }

    maven {
        url = uri('https://maven.pkg.github.com/tomasz-herman/WindowBuilder')
        credentials {
            username = "token"
            password = "\u0033\u0038\u0038\u0063\u0034\u0034\u0062\u0039\u0037\u0034\u0032\u0035\u0065\u0061\u0036\u0065\u0064\u0066\u0031\u0065\u0030\u0033\u0039\u0032\u0066\u0063\u0064\u0031\u0064\u0065\u0031\u0039\u0036\u0039\u0038\u0064\u0064\u0039\u0039\u0061"
        }
    }

    maven {
        url = uri('https://maven.pkg.github.com/tomasz-herman/JTerminal')
        credentials {
            username = "token"
            password = "\u0033\u0038\u0038\u0063\u0034\u0034\u0062\u0039\u0037\u0034\u0032\u0035\u0065\u0061\u0036\u0065\u0064\u0066\u0031\u0065\u0030\u0033\u0039\u0032\u0066\u0063\u0064\u0031\u0064\u0065\u0031\u0039\u0036\u0039\u0038\u0064\u0064\u0039\u0039\u0061"
        }
    }
}

dependencies {
    implementation 'com.fifesoft:rsyntaxtextarea:3.1.0'
    implementation 'com.formdev:flatlaf:0.38'
    implementation 'com.hermant:pseudo-assembler-emulator:3.1.6'
    implementation 'org.jetbrains:annotations:19.0.0'
    implementation 'com.fifesoft:autocomplete:3.1.0'
    implementation 'com.hermant:windowbuilder:1.0.2'
    implementation 'com.hermant:jterminal:0.0.35-alpha'

//    implementation 'org.jetbrains.jediterm:jediterm-pty:2.29'
//    implementation 'org.jetbrains.pty4j:pty4j:0.8.6'
//
//    implementation 'log4j:log4j:1.2.17'
//    implementation 'com.google.guava:guava:27.1-jre'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.0'
}

group = 'com.paide'
version = '1.0.0'
sourceCompatibility = '11'

application {
    mainClass = 'com.paide.Main'
}

jar {
    manifest {
        attributes(
                'Main-Class': 'com.paide.Main'
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    jpackage {
        imageName = "Pseudo-Assembler IDE"
        installerName = "Pseudo-Assembler IDE"
        installerOptions = []
        installerType = project.findProperty('installerType')
        if (installerType == 'msi') {
            imageOptions += ['--icon', 'src/main/resources/paide.ico']
            installerOptions += [
                    '--win-per-user-install',
                    '--win-dir-chooser',
                    '--win-menu',
                    '--win-shortcut',
                    '--win-menu-group', 'Pseudo-Assembler',
                    '--name', 'Pseudo-Assembler IDE',
                    '--win-upgrade-uuid', '49273554-6ec7-47ef-8619-7b1377551575'
            ]
        }
        if (installerType == 'pkg') {
            imageOptions += ['--icon', 'src/main/resources/paide256.png']
            installerOptions += []
        }
        if (installerType == 'deb') {
            imageOptions += ['--icon', 'src/main/resources/paide256.png']
            installerOptions += [
                    '--linux-menu-group', 'Development',
                    '--linux-shortcut'
            ]
        }
        if (installerType == 'rpm') {
            imageOptions += ['--icon', 'src/main/resources/paide256.png']
            installerOptions += [
                    '--linux-menu-group', 'Development',
                    '--linux-shortcut'
            ]
        }
    }
}

jpackage {
    doFirst {
        project.getProperty('installerType')
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
