package com.paide.gui.editor;

import org.fife.ui.rsyntaxtextarea.AbstractJFlexTokenMaker;
import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rsyntaxtextarea.TokenImpl;

import javax.swing.text.Segment;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;


/**
 * Scanner for the C programming language.
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>CTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.6
 *
 */

public class PseudoAssemblerTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\50\1\43\1\0\1\50\1\57\22\0\1\50\1\36\1\44"+
    "\1\60\1\61\1\65\1\116\1\33\1\31\1\31\1\51\1\7\1\64"+
    "\1\37\1\55\1\32\1\47\3\41\4\5\2\3\1\70\1\52\1\34"+
    "\1\30\1\35\1\27\1\62\1\102\1\4\1\73\1\72\1\6\1\56"+
    "\1\104\1\101\1\100\1\113\1\1\1\54\1\111\1\103\1\106\1\107"+
    "\1\112\1\75\1\74\1\76\1\53\1\110\1\1\1\77\1\105\1\114"+
    "\1\63\1\40\1\63\1\120\1\2\1\0\1\24\1\46\1\21\1\10"+
    "\1\11\1\12\1\25\1\66\1\13\2\1\1\15\1\26\1\14\1\20"+
    "\1\23\1\1\1\17\1\16\1\67\1\22\1\45\1\71\1\42\2\1"+
    "\1\115\1\117\1\115\1\64\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\2\2\3\4\1\5\1\4"+
    "\1\6\3\4\1\2\1\7\1\10\1\3\1\11\1\12"+
    "\1\2\1\4\1\2\2\1\1\4\16\2\2\4\2\13"+
    "\1\14\5\13\1\15\2\13\1\2\1\16\3\17\2\3"+
    "\1\20\4\2\1\0\1\21\2\22\1\23\1\6\2\10"+
    "\1\24\1\17\1\2\1\25\12\2\6\1\1\0\1\2"+
    "\1\26\6\2\1\25\7\2\1\25\5\2\1\25\3\2"+
    "\1\25\1\2\2\0\1\27\6\0\1\3\1\0\1\3"+
    "\1\17\1\20\2\2\1\6\1\30\1\6\3\22\1\6"+
    "\2\10\1\31\1\32\1\2\1\25\10\2\4\1\1\16"+
    "\4\1\6\0\3\2\1\33\3\2\1\25\10\0\1\3"+
    "\1\20\1\0\1\34\1\6\1\10\2\32\2\2\1\25"+
    "\7\1\4\0\1\16\4\0\2\2\2\0\1\35\2\0"+
    "\1\36\2\3\1\32\1\16\3\1\7\0\2\2\4\0"+
    "\1\3\2\1\5\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\121\0\242\0\363\0\u0144\0\u0195\0\u01e6\0\u0237"+
    "\0\u0288\0\u02d9\0\u032a\0\u037b\0\u03cc\0\u041d\0\u046e\0\u04bf"+
    "\0\u0510\0\363\0\u037b\0\u0561\0\u05b2\0\u0603\0\u037b\0\u0654"+
    "\0\u06a5\0\u06f6\0\u037b\0\u0747\0\u037b\0\u0798\0\u07e9\0\u083a"+
    "\0\u088b\0\u08dc\0\u092d\0\u097e\0\u09cf\0\u0a20\0\u0a71\0\u0ac2"+
    "\0\u0b13\0\u0b64\0\u0bb5\0\u0c06\0\u0c57\0\u0ca8\0\u0cf9\0\u037b"+
    "\0\u0d4a\0\u0d9b\0\u0dec\0\u0e3d\0\u0e8e\0\u037b\0\u0edf\0\u0f30"+
    "\0\u0f81\0\u037b\0\u0fd2\0\u1023\0\u1074\0\u10c5\0\u1116\0\u1167"+
    "\0\u11b8\0\u1209\0\u125a\0\u12ab\0\u12fc\0\u037b\0\u134d\0\u139e"+
    "\0\u037b\0\u13ef\0\u1440\0\u1491\0\u037b\0\u14e2\0\u1533\0\u1584"+
    "\0\u15d5\0\u1626\0\u1677\0\u16c8\0\u1719\0\u176a\0\u17bb\0\u180c"+
    "\0\u185d\0\u18ae\0\u18ff\0\u1950\0\u19a1\0\u19f2\0\u1a43\0\u1a94"+
    "\0\u1ae5\0\u1b36\0\u0144\0\u1b87\0\u1bd8\0\u1c29\0\u1c7a\0\u1ccb"+
    "\0\u1d1c\0\u1d6d\0\u1dbe\0\u1e0f\0\u1e60\0\u1eb1\0\u1f02\0\u1f53"+
    "\0\u1fa4\0\u1ff5\0\u2046\0\u2097\0\u20e8\0\u2139\0\u218a\0\u0144"+
    "\0\u21db\0\u222c\0\u227d\0\u22ce\0\u231f\0\u2370\0\u23c1\0\u037b"+
    "\0\u2412\0\u2463\0\u24b4\0\u2505\0\u2556\0\u25a7\0\u25f8\0\u2649"+
    "\0\u1023\0\u269a\0\u0fd2\0\u26eb\0\u273c\0\u278d\0\u037b\0\u27de"+
    "\0\u282f\0\u2880\0\u28d1\0\u2922\0\u2973\0\u29c4\0\u037b\0\u2a15"+
    "\0\u2a66\0\u2ab7\0\u2b08\0\u2b59\0\u2baa\0\u2bfb\0\u2c4c\0\u2c9d"+
    "\0\u2cee\0\u2d3f\0\u2d90\0\u2de1\0\u2e32\0\u2e83\0\u2ed4\0\u2f25"+
    "\0\u2f76\0\u2fc7\0\u3018\0\u3069\0\u30ba\0\u310b\0\u315c\0\u31ad"+
    "\0\u31fe\0\u324f\0\u32a0\0\u32f1\0\u0144\0\u22ce\0\u3342\0\u3393"+
    "\0\u33e4\0\u3435\0\u3486\0\u34d7\0\u3528\0\u3579\0\u35ca\0\u361b"+
    "\0\u366c\0\u36bd\0\u370e\0\u375f\0\u0144\0\u37b0\0\u3801\0\u3852"+
    "\0\u38a3\0\u38f4\0\u3945\0\u3996\0\u39e7\0\u3a38\0\u3a89\0\u3ada"+
    "\0\u3b2b\0\u3b7c\0\u3bcd\0\u3c1e\0\u3c6f\0\u3cc0\0\u3d11\0\u3d62"+
    "\0\u3db3\0\u3e04\0\u3e55\0\u3ea6\0\u3ef7\0\u3f48\0\u3f99\0\u3fea"+
    "\0\u403b\0\u408c\0\u40dd\0\u412e\0\u417f\0\u41d0\0\u1023\0\363"+
    "\0\u4221\0\u4272\0\u42c3\0\u4314\0\u4365\0\u43b6\0\u4407\0\u4458"+
    "\0\u44a9\0\u44fa\0\u454b\0\u459c\0\u45ed\0\u403b\0\u463e\0\u412e"+
    "\0\u0fd2\0\u468f\0\u46e0\0\u4731\0\u4782\0\u47d3\0\u4824\0\u4875";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\6\1\10\1\11\17\5"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\13"+
    "\1\21\1\22\1\6\1\5\1\23\1\24\2\5\1\25"+
    "\1\26\1\13\1\27\1\5\1\30\1\31\1\32\1\33"+
    "\1\34\2\4\1\14\1\35\1\13\2\5\1\35\1\5"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\2\5\1\50\1\51\1\5\1\52\1\5"+
    "\1\53\1\5\1\14\1\54\1\55\1\13\12\56\1\57"+
    "\30\56\1\60\5\56\1\61\14\56\1\62\2\56\1\63"+
    "\27\56\12\64\1\65\30\64\1\66\22\64\1\67\2\64"+
    "\1\70\27\64\7\4\1\0\17\4\11\0\3\4\2\0"+
    "\3\4\3\0\2\4\1\0\1\4\1\0\3\4\3\0"+
    "\2\4\1\0\24\4\4\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\3\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\71\1\4\3\0\2\5\1\72"+
    "\24\5\4\0\1\73\2\74\1\6\1\74\1\6\1\75"+
    "\1\0\1\74\1\75\3\74\1\76\4\74\1\77\4\74"+
    "\11\0\1\73\1\6\1\74\2\0\2\74\1\6\3\0"+
    "\1\77\1\76\1\100\1\74\1\0\3\73\3\0\2\74"+
    "\1\72\24\74\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\3\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\71\1\4\3\0\2\5\1\72\14\5"+
    "\1\101\1\102\6\5\4\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\3\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\71\1\4\3\0\2\5\1\72"+
    "\6\5\1\103\3\5\1\104\11\5\13\0\1\35\20\0"+
    "\1\35\117\0\1\105\121\0\1\35\241\0\1\35\20\0"+
    "\1\106\47\0\27\107\1\110\3\107\1\111\4\107\1\112"+
    "\2\107\1\0\55\107\30\0\1\35\3\0\1\13\114\0"+
    "\1\35\4\0\1\13\113\0\1\35\6\0\1\35\61\0"+
    "\40\24\1\113\2\24\1\114\1\115\54\24\1\73\2\74"+
    "\1\6\1\74\1\6\1\75\1\0\1\74\1\75\3\74"+
    "\1\76\4\74\1\77\4\74\11\0\1\73\1\6\1\116"+
    "\2\0\2\74\1\6\3\0\1\77\1\76\1\100\1\74"+
    "\1\0\3\73\3\0\2\74\1\72\6\74\1\116\15\74"+
    "\54\0\1\26\50\0\1\4\5\5\1\117\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\3\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\71\1\4\3\0\2\5\1\72"+
    "\1\5\1\120\13\5\1\121\6\5\7\0\1\100\1\0"+
    "\1\100\33\0\1\100\5\0\1\100\51\0\1\4\6\5"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\3\5\3\0"+
    "\1\5\1\122\1\0\1\5\1\0\1\4\1\71\1\4"+
    "\3\0\2\5\1\72\1\5\1\123\1\124\1\125\1\5"+
    "\1\126\1\127\1\130\1\5\1\131\3\5\1\102\1\132"+
    "\1\5\1\52\3\5\4\0\7\4\1\0\1\133\1\134"+
    "\1\4\1\135\1\4\1\136\4\4\1\137\1\140\3\4"+
    "\11\0\3\4\2\0\3\4\1\141\2\0\2\4\1\0"+
    "\1\4\1\0\3\4\3\0\2\4\1\0\24\4\4\0"+
    "\1\4\5\5\1\142\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\3\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\71\1\4\3\0\2\5\1\72\2\5\2\143\3\5"+
    "\1\144\14\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\3\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\71\1\4\3\0\2\5\1\72\10\5"+
    "\1\145\1\146\3\5\1\102\2\5\1\147\3\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\3\0\1\150\1\151\1\0\1\5\1\0\1\4"+
    "\1\71\1\4\3\0\2\5\1\72\5\5\1\152\2\5"+
    "\2\153\12\5\4\0\1\4\5\5\1\154\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\3\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\71\1\4\3\0\2\5\1\72"+
    "\11\5\1\155\3\5\1\153\6\5\4\0\1\4\5\5"+
    "\1\156\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\3\0\2\5\1\0\1\5\1\0\1\4\1\71\1\4"+
    "\3\0\2\5\1\72\7\5\1\157\14\5\4\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\3\0\2\5\1\0\1\5\1\0\1\4\1\71\1\4"+
    "\3\0\2\5\1\72\2\5\1\160\12\5\1\161\6\5"+
    "\4\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\3\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\71\1\4\3\0\2\5\1\72\1\5\1\123\10\5"+
    "\1\162\2\5\1\102\6\5\4\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\3\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\71\1\4\3\0\2\5"+
    "\1\72\11\5\1\163\12\5\4\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\3\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\71\1\4\3\0\2\5"+
    "\1\72\1\5\1\164\10\5\1\164\11\5\4\0\1\4"+
    "\5\5\1\165\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\3\0\2\5\1\0\1\5\1\0\1\4\1\71"+
    "\1\4\3\0\2\5\1\72\15\5\1\166\6\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\3\0\1\167\1\5\1\0\1\5\1\0\1\4"+
    "\1\71\1\4\3\0\2\5\1\72\4\5\1\170\17\5"+
    "\4\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\3\0\1\171\1\5\1\0\1\5\1\0"+
    "\1\4\1\71\1\4\3\0\2\5\1\72\15\5\1\172"+
    "\6\5\4\0\1\4\6\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\3\5\3\0\1\173\1\5\1\0\1\5"+
    "\1\0\1\4\1\71\1\4\3\0\2\5\1\72\24\5"+
    "\4\0\1\4\3\5\1\174\1\5\1\170\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\3\0\1\5\1\174"+
    "\1\0\1\5\1\0\1\4\1\71\1\4\3\0\2\5"+
    "\1\72\2\5\2\170\5\5\1\174\1\175\1\174\1\5"+
    "\2\170\1\5\1\147\2\5\1\170\34\0\1\35\65\0"+
    "\1\35\32\0\1\35\66\0\1\35\1\0\12\56\1\0"+
    "\30\56\1\0\5\56\1\0\14\56\1\0\2\56\1\0"+
    "\27\56\13\0\1\176\53\0\1\177\63\0\1\200\155\0"+
    "\1\201\122\0\1\202\27\0\12\64\1\0\30\64\1\0"+
    "\22\64\1\0\2\64\1\0\27\64\13\0\1\203\53\0"+
    "\1\204\120\0\1\205\122\0\1\206\27\0\1\4\6\71"+
    "\1\0\17\71\11\0\1\4\2\71\2\0\3\71\3\0"+
    "\2\71\1\0\1\71\1\0\1\4\1\71\1\4\3\0"+
    "\2\71\1\0\24\71\4\0\7\73\1\0\17\73\11\0"+
    "\3\73\2\0\3\73\3\0\2\73\1\0\1\73\1\0"+
    "\3\73\3\0\2\73\1\0\24\73\4\0\1\73\6\74"+
    "\1\0\17\74\11\0\1\73\2\74\2\0\3\74\3\0"+
    "\2\74\1\0\1\74\1\0\3\73\3\0\2\74\1\72"+
    "\24\74\4\0\1\73\2\74\1\207\1\74\1\207\1\74"+
    "\1\210\17\74\10\0\1\210\1\73\1\207\1\74\2\0"+
    "\2\74\1\207\3\0\2\74\1\0\1\74\1\0\3\73"+
    "\3\0\2\74\1\72\24\74\4\0\1\73\6\74\1\0"+
    "\12\74\1\211\4\74\11\0\1\73\2\74\2\0\3\74"+
    "\3\0\1\211\1\74\1\0\1\74\1\0\3\73\3\0"+
    "\2\74\1\72\24\74\4\0\1\73\6\74\1\0\5\74"+
    "\1\211\11\74\11\0\1\73\2\74\2\0\3\74\3\0"+
    "\1\74\1\211\1\0\1\74\1\0\3\73\3\0\2\74"+
    "\1\72\24\74\4\0\3\73\1\100\1\73\1\100\1\212"+
    "\1\0\1\73\1\212\1\213\2\73\1\213\11\73\11\0"+
    "\1\73\1\100\1\73\2\0\2\73\1\100\3\0\1\73"+
    "\1\213\1\0\1\213\1\0\3\73\3\0\2\73\1\0"+
    "\24\73\4\0\1\4\6\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\3\5\3\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\71\1\4\3\0\2\5\1\72\5\5\1\214"+
    "\16\5\4\0\1\4\6\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\3\5\3\0\1\167\1\5\1\0\1\5"+
    "\1\0\1\4\1\71\1\4\3\0\2\5\1\72\24\5"+
    "\4\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\3\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\71\1\4\3\0\2\5\1\72\7\5\1\154\14\5"+
    "\4\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\3\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\71\1\4\3\0\2\5\1\72\5\5\1\215\16\5"+
    "\34\0\10\35\61\0\33\216\1\217\7\216\1\0\104\216"+
    "\1\220\3\216\1\217\7\216\1\0\62\216\1\221\3\216"+
    "\2\107\1\216\1\107\2\216\1\107\4\216\1\107\2\216"+
    "\1\107\3\216\1\222\4\216\1\107\1\223\1\224\1\0"+
    "\3\107\1\223\17\216\1\107\7\216\1\224\21\216\5\114"+
    "\1\24\3\114\2\24\1\114\1\24\2\114\1\24\4\114"+
    "\1\24\2\114\1\24\3\114\1\24\4\114\2\24\1\225"+
    "\1\0\4\24\17\114\1\24\7\114\1\225\61\114\1\226"+
    "\3\114\1\227\54\114\1\73\2\74\4\230\1\0\3\230"+
    "\6\74\1\230\2\74\1\230\2\74\11\0\1\73\1\230"+
    "\1\74\2\0\1\74\2\230\3\0\2\74\1\0\1\230"+
    "\1\0\3\73\3\0\2\74\1\72\1\74\2\230\6\74"+
    "\1\230\12\74\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\3\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\71\1\4\3\0\2\5\1\72\11\5"+
    "\1\231\12\5\4\0\1\4\3\5\1\232\2\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\3\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\71\1\4\3\0\2\5"+
    "\1\72\11\5\1\170\12\5\4\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\3\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\71\1\4\3\0\2\5"+
    "\1\72\15\5\1\147\6\5\4\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\3\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\71\1\4\3\0\2\5"+
    "\1\72\1\5\1\170\13\5\1\233\6\5\4\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\3\0\2\5\1\0\1\5\1\0\1\4\1\71\1\4"+
    "\3\0\2\5\1\72\7\5\1\144\14\5\4\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\3\0\2\5\1\0\1\5\1\0\1\4\1\71\1\4"+
    "\3\0\2\5\1\72\15\5\1\234\2\5\1\147\3\5"+
    "\4\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\3\0\1\150\1\5\1\0\1\5\1\0"+
    "\1\4\1\71\1\4\3\0\2\5\1\72\5\5\1\170"+
    "\1\5\1\235\11\5\1\236\2\5\4\0\1\4\6\5"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\3\5\3\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\71\1\4\3\0"+
    "\2\5\1\72\3\5\1\167\5\5\1\235\12\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\3\0\2\5\1\0\1\5\1\0\1\4\1\71"+
    "\1\4\3\0\2\5\1\72\2\5\1\237\6\5\1\240"+
    "\12\5\4\0\1\4\6\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\3\5\3\0\1\5\1\164\1\0\1\5"+
    "\1\0\1\4\1\71\1\4\3\0\2\5\1\72\3\5"+
    "\1\167\20\5\4\0\1\4\3\5\1\234\2\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\3\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\71\1\4\3\0\2\5"+
    "\1\72\1\5\1\164\22\5\4\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\3\0\1\241"+
    "\1\5\1\0\1\5\1\0\1\4\1\71\1\4\3\0"+
    "\2\5\1\72\15\5\1\242\6\5\4\0\7\4\1\0"+
    "\1\4\1\243\15\4\11\0\3\4\2\0\3\4\3\0"+
    "\2\4\1\0\1\4\1\0\3\4\3\0\2\4\1\0"+
    "\24\4\4\0\7\4\1\0\4\4\1\244\1\245\1\4"+
    "\1\246\7\4\11\0\3\4\2\0\3\4\3\0\2\4"+
    "\1\0\1\4\1\0\3\4\3\0\2\4\1\0\24\4"+
    "\4\0\7\4\1\0\2\4\1\247\1\4\1\250\12\4"+
    "\11\0\3\4\2\0\3\4\3\0\2\4\1\0\1\4"+
    "\1\0\3\4\3\0\2\4\1\0\24\4\4\0\7\4"+
    "\1\0\3\4\1\251\13\4\11\0\3\4\2\0\3\4"+
    "\3\0\2\4\1\0\1\4\1\0\3\4\3\0\2\4"+
    "\1\0\24\4\4\0\7\4\1\0\4\4\1\252\12\4"+
    "\11\0\3\4\2\0\3\4\3\0\2\4\1\0\1\4"+
    "\1\0\3\4\3\0\2\4\1\0\24\4\4\0\7\4"+
    "\1\0\7\4\1\253\7\4\11\0\3\4\2\0\3\4"+
    "\3\0\2\4\1\0\1\4\1\0\3\4\3\0\2\4"+
    "\1\0\24\4\14\0\1\254\1\255\1\0\1\256\1\0"+
    "\1\257\4\0\1\260\1\261\24\0\1\141\50\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\3\0\2\5\1\0\1\5\1\0\1\4\1\71\1\4"+
    "\3\0\2\5\1\72\2\5\1\170\21\5\4\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\3\0\2\5\1\0\1\5\1\0\1\4\1\71\1\4"+
    "\3\0\2\5\1\72\17\5\1\170\4\5\4\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\3\0\2\5\1\0\1\5\1\0\1\4\1\71\1\4"+
    "\3\0\2\5\1\72\11\5\1\262\12\5\4\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\3\0\1\5\1\173\1\0\1\5\1\0\1\4\1\71"+
    "\1\4\3\0\2\5\1\72\24\5\4\0\1\4\6\5"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\3\5\3\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\71\1\4\3\0"+
    "\2\5\1\72\16\5\1\170\5\5\4\0\1\4\3\5"+
    "\1\170\2\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\3\0\2\5\1\0\1\5\1\0\1\4\1\71"+
    "\1\4\3\0\2\5\1\72\24\5\4\0\1\4\5\5"+
    "\1\263\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\3\0\2\5\1\0\1\5\1\0\1\4\1\71\1\4"+
    "\3\0\2\5\1\72\24\5\4\0\1\4\3\5\1\170"+
    "\2\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\3\0\2\5\1\0\1\5\1\0\1\4\1\71\1\4"+
    "\3\0\2\5\1\72\4\5\1\264\17\5\4\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\3\0\1\5\1\170\1\0\1\5\1\0\1\4\1\71"+
    "\1\4\3\0\2\5\1\72\4\5\1\170\17\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\3\0\2\5\1\0\1\5\1\0\1\4\1\71"+
    "\1\4\3\0\2\5\1\72\5\5\1\265\16\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\3\0\2\5\1\0\1\5\1\0\1\4\1\71"+
    "\1\4\3\0\2\5\1\72\12\5\1\164\11\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\3\0\2\5\1\0\1\5\1\0\1\4\1\71"+
    "\1\4\3\0\2\5\1\72\3\5\1\167\20\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\3\0\2\5\1\0\1\5\1\0\1\4\1\71"+
    "\1\4\3\0\2\5\1\72\20\5\1\266\3\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\3\0\2\5\1\0\1\5\1\0\1\4\1\71"+
    "\1\4\3\0\2\5\1\72\10\5\1\165\13\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\3\0\2\5\1\0\1\5\1\0\1\4\1\71"+
    "\1\4\3\0\2\5\1\72\4\5\1\170\17\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\3\0\2\5\1\0\1\5\1\0\1\4\1\71"+
    "\1\4\3\0\2\5\1\72\2\5\1\170\2\5\1\267"+
    "\16\5\4\0\1\4\6\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\3\5\3\0\1\5\1\167\1\0\1\5"+
    "\1\0\1\4\1\71\1\4\3\0\2\5\1\72\24\5"+
    "\4\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\3\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\71\1\4\3\0\2\5\1\72\1\5\1\170\22\5"+
    "\4\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\3\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\71\1\4\3\0\2\5\1\72\13\5\1\170\10\5"+
    "\4\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\3\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\71\1\4\3\0\2\5\1\72\5\5\1\170\10\5"+
    "\1\170\5\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\3\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\71\1\4\3\0\2\5\1\72\5\5"+
    "\1\170\16\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\3\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\71\1\4\3\0\2\5\1\72\3\5"+
    "\1\270\20\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\3\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\71\1\4\3\0\2\5\1\72\16\5"+
    "\1\271\5\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\3\0\1\5\1\170\1\0"+
    "\1\5\1\0\1\4\1\71\1\4\3\0\2\5\1\72"+
    "\24\5\4\0\1\4\5\5\1\170\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\3\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\71\1\4\3\0\2\5\1\72\24\5"+
    "\4\0\1\4\3\5\1\174\1\5\1\170\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\3\0\1\5\1\174"+
    "\1\0\1\5\1\0\1\4\1\71\1\4\3\0\2\5"+
    "\1\72\2\5\2\170\5\5\1\174\1\5\1\174\1\5"+
    "\2\170\4\5\1\170\21\0\1\272\126\0\1\273\164\0"+
    "\1\274\122\0\1\275\44\0\1\276\126\0\1\277\164\0"+
    "\1\300\122\0\1\301\27\0\1\73\2\74\1\207\1\74"+
    "\1\207\1\74\1\0\5\74\1\76\4\74\1\77\4\74"+
    "\11\0\1\73\1\207\1\74\2\0\2\74\1\207\3\0"+
    "\1\77\1\76\1\0\1\74\1\0\3\73\3\0\2\74"+
    "\1\72\24\74\7\0\1\302\1\0\1\302\33\0\1\302"+
    "\5\0\1\302\51\0\3\73\1\303\1\73\1\303\1\73"+
    "\1\304\17\73\10\0\1\304\1\73\1\303\1\73\2\0"+
    "\2\73\1\303\3\0\2\73\1\0\1\73\1\0\3\73"+
    "\3\0\2\73\1\0\24\73\4\0\1\4\5\5\1\305"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\3\5\3\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\71\1\4\3\0"+
    "\2\5\1\72\24\5\4\0\1\4\5\5\1\161\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\3\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\71\1\4\3\0\2\5"+
    "\1\72\24\5\4\0\33\216\1\111\7\216\1\0\105\216"+
    "\3\107\1\222\4\107\3\216\1\0\62\216\1\107\25\216"+
    "\1\217\5\216\1\107\1\216\1\0\3\216\1\107\51\216"+
    "\33\0\1\217\65\0\5\216\1\221\25\216\1\217\5\216"+
    "\1\221\1\216\1\0\3\216\1\221\54\216\4\306\1\216"+
    "\3\306\6\216\1\306\2\216\1\306\6\216\1\111\5\216"+
    "\1\306\1\216\1\0\2\216\2\306\6\216\1\306\13\216"+
    "\2\306\6\216\1\306\16\216\3\114\4\307\1\114\3\307"+
    "\6\114\1\307\2\114\1\307\13\114\1\226\1\307\2\114"+
    "\1\227\1\114\2\307\6\114\1\307\13\114\2\307\6\114"+
    "\1\307\61\114\1\0\55\114\1\73\2\74\4\230\1\0"+
    "\3\230\2\74\1\310\3\74\1\230\1\311\1\74\1\230"+
    "\2\74\11\0\1\73\1\230\1\74\2\0\1\74\2\230"+
    "\3\0\1\311\1\310\1\0\1\230\1\0\3\73\3\0"+
    "\2\74\1\72\1\74\2\230\6\74\1\230\12\74\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\3\0\2\5\1\0\1\5\1\0\1\4\1\71"+
    "\1\4\3\0\2\5\1\72\17\5\1\266\4\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\3\0\1\170\1\5\1\0\1\5\1\0\1\4"+
    "\1\71\1\4\3\0\2\5\1\72\24\5\4\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\3\0\2\5\1\0\1\5\1\0\1\4\1\71\1\4"+
    "\3\0\2\5\1\72\11\5\1\312\12\5\4\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\3\0\2\5\1\0\1\5\1\0\1\4\1\71\1\4"+
    "\3\0\2\5\1\72\3\5\1\170\20\5\4\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\3\0\2\5\1\0\1\5\1\0\1\4\1\71\1\4"+
    "\3\0\2\5\1\72\12\5\1\170\11\5\4\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\3\0\2\5\1\0\1\5\1\0\1\4\1\71\1\4"+
    "\3\0\2\5\1\72\4\5\1\167\17\5\4\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\3\0\2\5\1\0\1\5\1\0\1\4\1\71\1\4"+
    "\3\0\2\5\1\72\10\5\1\170\13\5\4\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\3\0\2\5\1\0\1\5\1\0\1\4\1\71\1\4"+
    "\3\0\2\5\1\72\20\5\1\170\3\5\4\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\3\0\2\5\1\0\1\5\1\0\1\4\1\71\1\4"+
    "\3\0\2\5\1\72\3\5\1\313\20\5\4\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\3\0\2\5\1\0\1\5\1\0\1\4\1\71\1\4"+
    "\3\0\2\5\1\72\16\5\1\314\5\5\4\0\7\4"+
    "\1\0\2\4\1\136\14\4\11\0\3\4\2\0\3\4"+
    "\3\0\2\4\1\0\1\4\1\0\3\4\3\0\2\4"+
    "\1\0\24\4\4\0\7\4\1\0\1\315\16\4\11\0"+
    "\3\4\2\0\3\4\3\0\2\4\1\0\1\4\1\0"+
    "\3\4\3\0\2\4\1\0\24\4\4\0\7\4\1\0"+
    "\3\4\1\316\2\4\1\317\10\4\11\0\3\4\2\0"+
    "\3\4\3\0\2\4\1\0\1\4\1\0\3\4\3\0"+
    "\2\4\1\0\24\4\4\0\7\4\1\0\7\4\1\320"+
    "\7\4\11\0\3\4\2\0\3\4\3\0\2\4\1\0"+
    "\1\4\1\0\3\4\3\0\2\4\1\0\24\4\4\0"+
    "\7\4\1\0\1\321\3\4\1\252\12\4\11\0\3\4"+
    "\2\0\3\4\3\0\2\4\1\0\1\4\1\0\3\4"+
    "\3\0\2\4\1\0\24\4\4\0\7\4\1\0\11\4"+
    "\1\322\5\4\11\0\3\4\2\0\3\4\3\0\2\4"+
    "\1\0\1\4\1\0\3\4\3\0\2\4\1\0\24\4"+
    "\4\0\7\4\1\0\4\4\1\317\12\4\11\0\3\4"+
    "\2\0\3\4\3\0\2\4\1\0\1\4\1\0\3\4"+
    "\3\0\2\4\1\0\24\4\4\0\7\4\1\0\1\321"+
    "\16\4\11\0\3\4\2\0\3\4\3\0\2\4\1\0"+
    "\1\4\1\0\3\4\3\0\2\4\1\0\24\4\4\0"+
    "\7\4\1\0\14\4\1\323\2\4\11\0\3\4\2\0"+
    "\3\4\3\0\2\4\1\0\1\4\1\0\3\4\3\0"+
    "\2\4\1\0\24\4\15\0\1\324\123\0\1\325\1\326"+
    "\1\0\1\327\113\0\1\330\1\0\1\331\117\0\1\332"+
    "\121\0\1\333\123\0\1\334\101\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\3\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\71\1\4\3\0\2\5"+
    "\1\72\4\5\1\305\17\5\4\0\1\4\5\5\1\147"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\3\5\3\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\71\1\4\3\0"+
    "\2\5\1\72\24\5\4\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\3\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\71\1\4\3\0\2\5\1\72"+
    "\7\5\1\335\14\5\4\0\1\4\5\5\1\336\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\3\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\71\1\4\3\0\2\5"+
    "\1\72\24\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\3\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\71\1\4\3\0\2\5\1\72\10\5"+
    "\1\271\13\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\3\0\2\5\1\0\1\170"+
    "\1\0\1\4\1\71\1\4\3\0\2\5\1\72\11\5"+
    "\1\170\12\5\15\0\1\273\177\0\1\337\53\0\1\340"+
    "\152\0\1\341\54\0\1\277\177\0\1\342\53\0\1\343"+
    "\152\0\1\344\43\0\3\73\1\302\1\73\1\302\1\73"+
    "\1\0\5\73\1\345\4\73\1\346\4\73\11\0\1\73"+
    "\1\302\1\73\2\0\2\73\1\302\3\0\1\346\1\345"+
    "\1\0\1\73\1\0\3\73\3\0\2\73\1\0\24\73"+
    "\4\0\3\73\1\303\1\73\1\303\1\73\1\0\2\73"+
    "\1\213\2\73\1\213\11\73\11\0\1\73\1\303\1\73"+
    "\2\0\2\73\1\303\3\0\1\73\1\213\1\0\1\213"+
    "\1\0\3\73\3\0\2\73\1\0\24\73\7\0\1\303"+
    "\1\0\1\303\33\0\1\303\5\0\1\303\51\0\3\216"+
    "\4\107\1\216\3\107\6\216\1\107\2\216\1\107\6\216"+
    "\1\111\5\216\1\107\1\216\1\0\2\216\2\107\6\216"+
    "\1\107\13\216\2\107\6\216\1\107\16\216\3\114\4\24"+
    "\1\114\3\24\6\114\1\24\2\114\1\24\13\114\1\226"+
    "\1\24\2\114\1\227\1\114\2\24\6\114\1\24\13\114"+
    "\2\24\6\114\1\24\16\114\1\73\6\74\1\0\12\74"+
    "\1\347\4\74\11\0\1\73\2\74\2\0\3\74\3\0"+
    "\1\347\1\74\1\0\1\74\1\0\3\73\3\0\2\74"+
    "\1\72\24\74\4\0\1\73\6\74\1\0\5\74\1\347"+
    "\11\74\11\0\1\73\2\74\2\0\3\74\3\0\1\74"+
    "\1\347\1\0\1\74\1\0\3\73\3\0\2\74\1\72"+
    "\24\74\4\0\1\4\6\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\3\5\3\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\71\1\4\3\0\2\5\1\72\5\5\1\305"+
    "\16\5\4\0\1\4\6\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\3\5\3\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\71\1\4\3\0\2\5\1\72\10\5\1\314"+
    "\13\5\4\0\1\4\6\5\1\0\17\5\11\0\1\4"+
    "\2\5\2\0\3\5\3\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\71\1\4\3\0\2\5\1\72\11\5\1\170"+
    "\12\5\4\0\7\4\1\0\3\4\1\316\13\4\11\0"+
    "\3\4\2\0\3\4\3\0\2\4\1\0\1\4\1\0"+
    "\3\4\3\0\2\4\1\0\24\4\4\0\7\4\1\0"+
    "\2\4\1\350\14\4\11\0\3\4\2\0\3\4\3\0"+
    "\2\4\1\0\1\4\1\0\3\4\3\0\2\4\1\0"+
    "\24\4\4\0\7\4\1\0\1\4\1\350\15\4\11\0"+
    "\3\4\2\0\3\4\3\0\2\4\1\0\1\4\1\0"+
    "\3\4\3\0\2\4\1\0\24\4\4\0\7\4\1\0"+
    "\10\4\1\351\6\4\11\0\3\4\2\0\3\4\3\0"+
    "\2\4\1\0\1\4\1\0\3\4\3\0\2\4\1\0"+
    "\24\4\4\0\7\4\1\0\1\4\1\316\15\4\11\0"+
    "\3\4\2\0\3\4\3\0\2\4\1\0\1\4\1\0"+
    "\3\4\3\0\2\4\1\0\24\4\4\0\7\4\1\0"+
    "\5\4\1\352\11\4\11\0\3\4\2\0\3\4\3\0"+
    "\2\4\1\0\1\4\1\0\3\4\3\0\2\4\1\0"+
    "\24\4\4\0\7\4\1\0\15\4\1\353\1\4\11\0"+
    "\3\4\2\0\3\4\3\0\2\4\1\0\1\4\1\0"+
    "\3\4\3\0\2\4\1\0\24\4\16\0\1\257\116\0"+
    "\1\354\123\0\1\355\2\0\1\356\121\0\1\357\111\0"+
    "\1\360\3\0\1\333\125\0\1\361\113\0\1\356\114\0"+
    "\1\360\134\0\1\362\74\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\3\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\71\1\4\3\0\2\5\1\72"+
    "\12\5\1\363\11\5\4\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\3\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\71\1\4\3\0\2\5\1\72"+
    "\13\5\1\364\10\5\36\0\1\365\104\0\1\273\51\0"+
    "\1\337\31\0\1\341\1\366\4\341\1\366\17\341\3\366"+
    "\1\341\1\366\2\0\2\366\1\0\2\341\2\0\3\341"+
    "\1\0\2\366\2\341\1\366\1\341\1\0\1\366\1\341"+
    "\4\366\2\341\1\366\24\341\1\0\1\366\34\0\1\367"+
    "\104\0\1\277\51\0\1\342\31\0\1\344\1\370\4\344"+
    "\1\370\17\344\3\370\1\344\1\370\2\0\2\370\1\0"+
    "\2\344\2\0\3\344\1\0\2\370\2\344\1\370\1\344"+
    "\1\0\1\370\1\344\4\370\2\344\1\370\24\344\1\0"+
    "\1\370\2\0\7\73\1\0\12\73\1\371\4\73\11\0"+
    "\3\73\2\0\3\73\3\0\1\371\1\73\1\0\1\73"+
    "\1\0\3\73\3\0\2\73\1\0\24\73\4\0\7\73"+
    "\1\0\5\73\1\371\11\73\11\0\3\73\2\0\3\73"+
    "\3\0\1\73\1\371\1\0\1\73\1\0\3\73\3\0"+
    "\2\73\1\0\24\73\4\0\7\4\1\0\7\4\1\350"+
    "\7\4\11\0\3\4\2\0\3\4\3\0\2\4\1\0"+
    "\1\4\1\0\3\4\3\0\2\4\1\0\24\4\4\0"+
    "\7\4\1\0\12\4\1\372\4\4\11\0\3\4\2\0"+
    "\3\4\3\0\2\4\1\0\1\4\1\0\3\4\3\0"+
    "\2\4\1\0\24\4\4\0\7\4\1\0\16\4\1\373"+
    "\11\0\3\4\2\0\3\4\3\0\2\4\1\0\1\4"+
    "\1\0\3\4\3\0\2\4\1\0\24\4\17\0\1\355"+
    "\117\0\1\72\117\0\1\72\127\0\1\374\111\0\1\355"+
    "\124\0\1\375\130\0\1\376\73\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\3\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\71\1\4\3\0\2\5"+
    "\1\72\13\5\1\305\10\5\4\0\1\4\5\5\1\262"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\3\5\3\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\71\1\4\3\0"+
    "\2\5\1\72\24\5\36\0\1\341\120\0\1\344\66\0"+
    "\7\4\1\0\1\317\16\4\11\0\3\4\2\0\3\4"+
    "\3\0\2\4\1\0\1\4\1\0\3\4\3\0\2\4"+
    "\1\0\24\4\4\0\7\4\1\0\14\4\1\350\2\4"+
    "\11\0\3\4\2\0\3\4\3\0\2\4\1\0\1\4"+
    "\1\0\3\4\3\0\2\4\1\0\24\4\23\0\1\72"+
    "\123\0\1\377\124\0\1\u0100\102\0\1\356\134\0\1\72"+
    "\74\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18630];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\10\1\1\11\6\1\1\11\3\1\1\11\3\1"+
    "\1\11\1\1\1\11\22\1\1\11\5\1\1\11\3\1"+
    "\1\11\12\1\1\0\1\11\2\1\1\11\3\1\1\11"+
    "\23\1\1\0\34\1\2\0\1\11\6\0\1\1\1\0"+
    "\6\1\1\11\7\1\1\11\24\1\6\0\10\1\10\0"+
    "\2\1\1\0\17\1\4\0\1\1\4\0\2\1\2\0"+
    "\1\1\2\0\10\1\7\0\2\1\4\0\3\1\5\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public PseudoAssemblerTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { ";", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *                    <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PseudoAssemblerTokenMaker(Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PseudoAssemblerTokenMaker(InputStream in) {
    this(new InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 190) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

//
//  /**
//   * Refills the input buffer.
//   *
//   * @return      <code>false</code>, iff there was new input.
//   *
//   * @exception   java.io.IOException  if any I/O-Error occurs
//   */
//  private boolean zzRefill() throws java.io.IOException {
//
//    /* first: make room (if you can) */
//    if (zzStartRead > 0) {
//      System.arraycopy(zzBuffer, zzStartRead,
//                       zzBuffer, 0,
//                       zzEndRead-zzStartRead);
//
//      /* translate stored positions */
//      zzEndRead-= zzStartRead;
//      zzCurrentPos-= zzStartRead;
//      zzMarkedPos-= zzStartRead;
//      zzPushbackPos-= zzStartRead;
//      zzStartRead = 0;
//    }
//
//    /* is the buffer big enough? */
//    if (zzCurrentPos >= zzBuffer.length) {
//      /* if not: blow it up */
//      char newBuffer[] = new char[zzCurrentPos*2];
//      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
//      zzBuffer = newBuffer;
//    }
//
//    /* finally: fill the buffer with new input */
//    int numRead = zzReader.read(zzBuffer, zzEndRead,
//                                            zzBuffer.length-zzEndRead);
//
//    if (numRead < 0) {
//      return true;
//    }
//    else {
//      zzEndRead+= numRead;
//      return false;
//    }
//  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


//  /**
//   * Resets the scanner to read from a new input stream.
//   * Does not close the old reader.
//   *
//   * All internal variables are reset, the old input stream
//   * <b>cannot</b> be reused (internal buffer is discarded and lost).
//   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
//   *
//   * @param reader   the new input stream
//   */
//  public final void yyreset(java.io.Reader reader) {
//    zzReader = reader;
//    zzAtBOL  = true;
//    zzAtEOF  = false;
//    zzEndRead = zzStartRead = 0;
//    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
//    yyline = yychar = yycolumn = 0;
//    zzLexicalState = YYINITIAL;
//  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public Token yylex() throws IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 14: 
          { addToken(Token.PREPROCESSOR);
          }
        case 31: break;
        case 7: 
          { addNullToken(); return firstToken;
          }
        case 32: break;
        case 24: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 33: break;
        case 23: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 34: break;
        case 17: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 35: break;
        case 9: 
          { addToken(Token.WHITESPACE);
          }
        case 36: break;
        case 26: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 37: break;
        case 18: 
          { addToken(Token.ERROR_CHAR); /*addNullToken(); return firstToken;*/
          }
        case 38: break;
        case 25: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 39: break;
        case 16: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 40: break;
        case 22: 
          { addToken(Token.RESERVED_WORD);
          }
        case 41: break;
        case 5: 
          { addToken(Token.SEPARATOR);
          }
        case 42: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 43: break;
        case 13: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 44: break;
        case 21: 
          { addToken(Token.FUNCTION);
          }
        case 45: break;
        case 6: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 46: break;
        case 8: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 47: break;
        case 28: 
          { addToken(Token.DATA_TYPE);
          }
        case 48: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 49: break;
        case 19: 
          { addToken(Token.ERROR_CHAR);
          }
        case 50: break;
        case 20: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 51: break;
        case 30: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 52: break;
        case 29: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 53: break;
        case 27: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 54: break;
        case 15: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 55: break;
        case 10: 
          { start = zzMarkedPos-1; yybegin(EOL_COMMENT);
          }
        case 56: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 57: break;
        case 4: 
          { addToken(Token.OPERATOR);
          }
        case 58: break;
        case 11: 
          { 
          }
        case 59: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 60: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 257: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 258: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 259: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
